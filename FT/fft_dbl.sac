use Array: all;
use StdIO: all; 
use Math: all;
use RandLC: all;
use RTimer: all;

#ifndef CLASS_B
#ifndef CLASS_S
#ifndef CLASS_T
#ifndef CLASS_W
#ifndef CLASS_A

#define CLASS_A

#endif
#endif
#endif
#endif
#endif

#ifdef CLASS_A
#define NX 256
#define NY 256
#define NZ 128
#define NX_2 128
#define NITER 6
#define NEXP 219651
#endif

#ifdef CLASS_B
#define NX 512
#define NY 256
#define NZ 256
#define NX_2 256
#define NITER 20
#define NEXP 2196510
#endif

#define EPS 1.0E-12

/************************** former support lib **********************/

inline double[2] cm(double[2] a, double[2] b)
{
  r = a[0] * b[0] - a[1] * b[1];
  i = a[0] * b[1] + a[1] * b[0];
  return([r,i]);
}

inline double sq(double a){
  return(a*a);
}

inline int sq(int a){
  return(a*a);
}

inline double my_mod(double a, double b, double d1, double d2)
{
  a1=floor(a/d2);
  a2=a-d2*a1;
  b1=floor(b/d2);
  b2=b-d2*b1;
  t1=a1*b2+a2*b1;
  t2=floor(t1/d2);
  t3=t1-d2*t2;
  t4=d2*t3+a2*b2;
  t5=floor(t4/d1);
  c=t4-d1*t5;
  
  return(c);
}

/* Init A with pseudorandom numbers defined by NAS
 * Calculated sequentielly 
 */
double[NX,NY,NZ,2] Initialize()
{
  A = genarray([NX,NY,NZ,2], 0d);
  
  seed=314159265d;
  rand = seed;
  a = pow(5d,13d);   
  const1 = pow(2d,46d);
  const2 = pow(2d,-46d);
  const3 = pow(2d,23d);

  n1=shape(A)[0];
  n2=shape(A)[1];
  n3=shape(A)[2];

  rlc = create_randlc(seed, a);

  for(z=0 ; z <n3  ; z++) {
    for(y=0 ; y <n2  ; y++) {
      for(x=0 ; x <n1  ; x++) {
	for(i=0 ; i<2 ; i++) {
          /*	  rand = my_mod (a , rand, const1, const3) ;
                  A[x,y,z,i] = rand * const2;*/
          A[x,y,z,i] = randlc(rlc);
	}
      }
    }
  }
  return(A);
} 


/* The indexmap[+] is used for evolve(), and has to be calculated once */
/* compute function from local (i,j,k) to i^2+j^2+k^2 */
/* for time evaluation exponent */

/*********** no inlining possible ******************/

inline int[NX,NY,NZ] ComputeIndexMap()
{
  map = genarray( [NX,NY,NZ], 0);
  map = with{
    (. <= iv <= .) {
      iv_scramble = ((iv + shape(map) / 2) % shape(map)) - shape(map) / 2;
      val = sum( iv_scramble*iv_scramble);
    } : val;
  } : modarray( map);

  return(map);
}


/* some exponential terms will be precomputed.
 * They are used in Evolve() for time-evaluation
 */

inline double[NEXP] ComputeExponentialMap()
{
  map = genarray([NEXP], 0d);
  
  alpha = pow(10d,-6d);
  ap = -4d * alpha * pi() * pi();
  map[0] = 1d;
  map[1] = exp(ap);

  for (i=2; i<shape(map)[0];i++ )
    map[i] = map[i-1] * map[1];

  return(map);

}

/* Initializes the double[+] u with sines and cosines  
 * so called Roots Of Unity. Used by ComplexFFT()
 */

inline double[NX_2,2] RootsOfUnity( double dir)
{
  u = genarray([NX_2,2], 0d);
  
  theta = dir * pi() / tod(shape(u)[0]);
  wp = [cos(theta) - 1d, sin(theta)];

  u[0]=[1d,0d];

  for (i=1; i<shape(u)[0] ; i++) {
    u[i] = cm(u[i-1], wp) + u[i-1];
  }
    
  return(u); 
}

/* swap the index and value*/
inline int[3] InvertPermVect(int[3] pv) 
{

  pv_inv = with{
    (. <= [i] <= .) {
      val = 0;
      for (j=1; j<shape(pv)[[0]]; j++){
        if (pv[[j]] == i)
          val = j;
      }
    } : val;
  } : modarray(pv);

  return(pv_inv);
}

/* Compute index in original array */
inline int[3] TransposeSelect( int[3] permv, int[3] indexv)
{
  permv = InvertPermVect(permv);

  res = with {
    (. <= iv <= .) : indexv[[permv[iv]]];
  } : modarray( indexv);
  
  return( res);
}

/* Change the order of the dimensions */
inline double[.,.,.,.] Transpose( int[3] permv, double[.,.,.,.] A)
{
  a = permv[[0]];
  b = permv[[1]];
  c = permv[[2]];
  sh = [ shape(A)[[a]], shape(A)[[b]], shape(A)[[c]] ];

  res = with {
    (. <= iv <= .) : A[ TransposeSelect( permv, iv) ];
  } : genarray(sh, [0d,0d]);
  return( res);
}

/* Here the time-evaluation is done 
 */

double[NX,NY,NZ,2] Evolve( 
                                 double[NX,NY,NZ,2] V, 
                                 int t, 
                                 int[NX,NY,NZ] index, 
                                 double[NEXP] expo
                                 )
{
  res = with {
    (. <= iv <= .) {
      newindex = t*index[iv];
      exponent = expo[[newindex]];
      val = cm(V[iv], [exponent,0d]);
    } : val;
  } : genarray( [NX,NY,NZ], [0d,0d]);

  return(res);
}

/* Calculate the sum of 1024 elements for verification
 */
inline double[2] Checksum( double[NX,NY,NZ,2] X)
{
  val = with {
    ( [0] <= [j] < [1024] ) {
      q = j % shape(X)[0];
      r = (3 * j) % shape(X)[1];
      s = (5 * j) % shape(X)[2];
    } : X[[q,r,s]];
  } : fold(+, [0d,0d]);

  return(val);
}


/* This Function returns the precomputed correct values for each 
 * Class. 
 */
inline double[.,.] Validate()
{

#ifdef CLASS_U    /* Userdefined */
  V = reshape([6,2],[0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,]);

#endif

#ifdef CLASS_T
  V = reshape([6,2],[
		     537.7889159453D,603.2787954587D,
		     537.2168198787D,602.3341297470D,
		     536.6548010284D,601.4013243123D,
		     536.1026866643D,600.4802068635D,
		     535.5603071923D,599.5706078797D,
		     535.0274960928D,598.6723605623D]);

#endif


#ifdef CLASS_S
  V = reshape([6,2],[
		     554.6087004964D,484.5363331978D,
		     554.6385409189D,486.5304269511D,
		     554.6148406171D,488.3910722336D,
		     554.5423607415D,490.1273169046D,
		     554.4255039624D,491.7475857993D,
		     554.2683411902D,493.2597244941D]);
#endif



#ifdef CLASS_W
  V =  reshape([6,2],[
                     567.3612178944D,529.3246849175D,
                     563.1436885271D,528.2149986629D,
                     559.4024089970D,527.0996558037D,
                     556.0698047020D,526.0027904925D, 
                     553.0898991250D,524.9400845633D,
                     550.4159734538D,523.9212247086D]);
#endif     

#ifdef CLASS_A
  V=reshape([6,2],[
		   504.6735008193,511.4047905510,
		   505.9412319734,509.8809666433,
		   506.9376896287,509.8144042213,
		   507.7892868474,510.1336130759,
		   508.5233095391,510.4914655194,
		   509.1487099959,510.7917842803]);
#endif     


#ifdef CLASS_B
  V = reshape([20,2],[
		      517.7643571579,507.7803458597,
		      515.4521291263,508.8249431599,
		      514.6409228649,509.6208912659,
		      514.2378756213,510.1023387619, 
		      513.9626667737,510.3976610617,
		      513.7423460082,510.5948019802,
		      513.5547056878,510.7404165783,
		      513.3910925466,510.8576573661,  
		      513.2470705390,510.9577278523,
		      513.1197729984,511.0460304483,
		      513.0070319283,511.1252433800, 
		      512.9070537032,511.1968077718,
		      512.8182883502,511.2616233064,
		      512.7393733383,511.3203605551,  
		      512.6691062020,511.3735928093, 
		      512.6064276004,511.4218460548,
		      512.5504076570,511.4656139760,
		      512.5002331720,511.5053595966,
		      512.4551951846,511.5415130407,
		      512.4146770029,511.5744692211]);
   
#endif 

    

  return(V);
}


/************************** Shuffle operations **********************/

inline double[.,.] condense(double[.,.] v)
{
  res = with { 
    (. <= [i] <= .) : v[i*2];
  } : genarray([(shape(v)[[0]]+1) / 2],[0d,0d]);
 return( res);
}

/************************** BEGIN OF FFT-Kernel**********************/

inline double[4,2] ComplexFFT(double dir, double[4,2] v, double[NX_2,2] rofu)
{
 
  w0 = v[0] + v[2];
  w1 = v[0] - v[2];
  w2 = v[1] + v[3];
  
  w3 = cm([dir,0d], cm([0d,1d], ( v[1] - v[3] )));

  t = [w0+w2,w1+w3,w0-w2,w1-w3];
    
  return(t);
}

inline double[.,.] MultRofu(double[.,.] v, double[NX_2,2] rofu)
{
  index = shape(rofu)[0] / shape(v)[0];

  prod = with {
    (. <= [i] <= .) : cm(v[i], rofu[[i]*index]);
  } : genarray( [shape(v)[[0]]], [0d,0d]);

  return(prod);
}

specialize 
double[*] ComplexFFT(double dir, double[  8,2] v, double[NX_2, 2] rofu);
specialize 
double[*] ComplexFFT(double dir, double[ 16,2] v, double[NX_2, 2] rofu);
specialize 
double[*] ComplexFFT(double dir, double[ 32,2] v, double[NX_2, 2] rofu);
specialize 
double[*] ComplexFFT(double dir, double[ 64,2] v, double[NX_2, 2] rofu);
specialize 
double[*] ComplexFFT(double dir, double[128,2] v, double[NX_2, 2] rofu);
specialize 
double[*] ComplexFFT(double dir, double[256,2] v, double[NX_2, 2] rofu);
specialize 
double[*] ComplexFFT(double dir, double[512,2] v, double[NX_2, 2] rofu);

#ifdef INLINE
inline
#endif
double[.,.] ComplexFFT(double dir, double[.,.] v, double[NX_2, 2] rofu)
{
  left_v = condense(v);
  right_v = condense(drop([1], v));
 
  fft_left = ComplexFFT(dir, left_v , rofu);
  fft_right = ComplexFFT(dir, right_v , rofu);

  fft_right_rofu = MultRofu(fft_right, rofu);

  tmp = (fft_left+fft_right_rofu) ++ (fft_left-fft_right_rofu);
  return(tmp);
} 




/* slices array in direction (k), calculates fft(), */
/* reassebles slices to array */
inline double[.,.,.,.] ComplexFFTSlice( 
                                       double dir, 
                                       double[.,.,.,.] in, 
                                       double[NX_2,2] rofu
                                       )
{
  result = with {
    (. <= iv <= .) {
      val = ComplexFFT(dir, in[iv], rofu);
    } : val;
  } : genarray([shape(in)[0],shape(in)[1]], genarray([shape(in)[2]], [0d,0d]));

  return(result);
}





/************** THIS IS THE TOP-LEVEL FFT-Func **********************/

#ifdef ACL

double[.,.,.,.] Complex3dFFT(
                             double dir, 
                             double[NX,NY,NZ,2] a, 
                             double[NX_2,2] rofu)
{ 
  if (dir > 0d) {
    a_t = Transpose( ([2,1,0]), a);
    b   = {[i,j] -> ComplexFFT(dir, a_t[i,j], rofu)};
    b_t = Transpose( ([0,2,1]),  b);
    c   = {[i,j] -> ComplexFFT(dir, b_t[i,j], rofu)};
    c_t = Transpose( ([1,2,0]),  c);
    r   = {[i,j] -> ComplexFFT(dir, c_t[i,j], rofu)};
  }
  else {  
    u   = {[i,j] -> ComplexFFT(dir, a[i,j], rofu)};
    u_t = Transpose( ([0,2,1]), u); 
    v   = {[i,j] -> ComplexFFT(dir, u_t[i,j], rofu)};
    v_t = Transpose( ([2,1,0]), v);
    w   = {[i,j] -> ComplexFFT(dir, v_t[i,j], rofu)};
    r   = Transpose( ([2,0,1]), w);
 }

  return(r);
}

#else

double[.,.,.,.] Complex3dFFT(
                             double dir,
                             double[.,.,.,.] a,
                             double[NX_2,2] rofu)
{
  if (dir > 0d) {
    a_t = Transpose( ([2,1,0]), a);
    b   = ComplexFFTSlice( 1d, a_t, rofu);
    b_t = Transpose( ([0,2,1]),  b);
    c   = ComplexFFTSlice( 1d, b_t, rofu);
    c_t = Transpose( ([1,2,0]),  c);
    d   = ComplexFFTSlice( 1d, c_t, rofu);
    res = d;
  }
  else {
    u   = ComplexFFTSlice( -1d, a, rofu);
    u_t = Transpose( ([0,2,1]), u);
    v   = ComplexFFTSlice( -1d, u_t, rofu);
    v_t = Transpose( ([2,1,0]), v);
    w   = ComplexFFTSlice( -1d, v_t, rofu);
    w_t = Transpose( ([2,0,1]), w);

    res = w_t;
 }

  return(res);
}
#endif




int main()
{ 
  printf("\n\n SAC Parallel Benchmarks (NPB3.2-SAC)"
              " - FT Benchmark\n");

  ntotal = NX*NY*NZ;

  printf("\n Size                : %d x %d x %d\n"
           " Iterations: %d \n",
         NX, NY, NZ, NITER );

  rtimer = createRTimer( );

  indexmap = ComputeIndexMap();
  expomap  = ComputeExponentialMap();
  rofu     = RootsOfUnity( 1d); 

  U = Initialize();
  V = Complex3dFFT( 1d, U, rofu);

  checks = genarray( [NITER,2], 0d);

  startRTimer( rtimer);

  rofu = RootsOfUnity( -1d); 


  /*****  Performing N iterations for timestep t *****************/

  for (t=1 ; t<=NITER ; t++) {
    
    W = Evolve( V, t, indexmap, expomap);
 
    X = Complex3dFFT( -1d, W, rofu) / tod(ntotal);

    checks[t-1] = Checksum(X);

    printf("T =\t%d\tChecksum:   %f   %f\n", t, checks[t-1,0], checks[t-1,1]);
  }
  
  stopRTimer( rtimer);

  if( all( abs((checks - Validate()) / Validate()) <= EPS) ) {
    verif = "SUCCESSFUL";
  } else {
    verif = "FAILED";
  }

  elapsed = getRTimerDbl( rtimer);

  if( elapsed != 0d ) {
    gflops = tod( ntotal ) * (14.8157+7.19641*log(tod(ntotal))
     +  (5.23518+7.21113*log(tod(ntotal)))*tod(NITER))/ elapsed / 1000000000.0d;
  } else {
    gflops = 0d;
  }

  printf("\n\n FT Benchmark Completed.\n");

  printf(" Size\t\t =\t%d x %d x %d\n"                    /*      Problem size    */
         " Iterations\t =\t%d\n"
         " Time in seconds =\t%f\n"
         " Gop/s total     =\t%f\n"             /*        RATE         */
         " Operation type  =\tfloating point\n"
         " Verification    =\t%s\n"
         " Version\t =\t3.2.1\n"
         " Compile date\t =\t"__DATE__"  \n\n\n",
         NX,NY,NZ,NITER,elapsed,gflops,verif);

  return(0);
}







