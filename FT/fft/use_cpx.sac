typedef double[2] cpx;


inline
cpx + (cpx a, cpx b) 
{
  x = (:double[2]) a;
  y = (:double[2]) b;
  
  res = [x[0]+y[0] , x[1]+y[1]];
  
  return((:cpx)res);
}


inline
cpx * (cpx a, cpx b) 
{
  x = (:double[2]) a;
  y = (:double[2]) b;
  
  res = [x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]];
  
  return((:cpx)res);
}


inline
int[+] shp(cpx[+] a)
{
  return( shape(a));
}



inline
cpx[+] + (cpx[+] a, cpx[+] b)
{

  res = with (.<=iv<=.)
  genarray(shape(a), ((:double[+])a)[iv] + ((:double[+])b)[iv]); 
  
  return((:cpx[+])res);
}




cpx[+] * (cpx[+] a, cpx[+] b)
{
  aa = (:double[+]) a;
  bb = (:double[+]) b;
  
  ub_real = shape(aa);
  ub_real[shape(ub_real) - 1] = 1;
  
  lb_imag = 0 * shape(aa);
  lb_imag[shape(lb_imag) - 1] = 1;
  
  res = with (. <= iv < ub_real) 
        {
          val = aa[iv] * bb[iv] - aa[iv+lb_imag] * bb[iv+lb_imag];
        }
        genarray(shape(aa), val);
  
  res = with (lb_imag <= iv <= .) 
        {
          val = aa[iv-lb_imag] * bb[iv] + aa[iv] * bb[iv-lb_imag];
        }
        modarray( res, iv, val);
  

  return((:cpx[+])res);
}


inline int[+] InvertPermVect(int[+] pv) 
{
  pv_inv = with (. <= iv <= .)
           {
             val = 0;
             for (i=0; i<shape(pv)[[0]]; i++) {
               if (pv[[i]] == iv[[0]]) {
                 val = i;
               }
             }
           }
           modarray(pv, iv, val);

  return(pv_inv);
}


inline int[+] TransposeSelect( int[+] permv, int[+] indexv)
{
  permv_inv = InvertPermVect(permv);
  
  res = with (. <= iv < shape(permv))
        modarray( indexv, iv, indexv[[permv_inv[iv]]]);
  
  return( res);
}

cpx[+] Transpose( int[+] permvv, cpx[+] A)
{
  permv = [2,1,0];
  
  AA = (:double[+]) A;

  res = with( .<= iv <= .)
        {
          ivt = TransposeSelect( permv, iv);
#ifndef NOTRICKS
          ivt = [ivt[[0]], ivt[[1]], ivt[[2]], ivt[[3]]]; 
#endif
          val = AA[ivt];
        }
        genarray([shape(AA)[[[2,1,0]/*permv*/[[0]]]],
                  shape(AA)[[[2,1,0]/*permv*/[[1]]]],
                  shape(AA)[[[2,1,0]/*permv*/[[2]]]],
                  2], 
                  val);

  return( (:cpx[+])res);
}



cpx[+] create(int[+] shp) 
{
  a = with (.<= iv <= .)
    {
      val=0d;
    }
  genarray([shp[[0]],shp[[1]],2], val);

  
  return((:cpx[+])a);
}


int[+] TakeScatter(int[+] offset, int[+] stride, int[+] A) 
{ 
  res = with(. <= iv <= .)
    {
      val = A[iv*stride + offset];
    }
  genarray((shape(A)-offset) / stride, val);
  
  return(res);
}


    

int fun(cpx[+] x) 
{
  return(0);
}

cpx psi(int[+] iv, cpx[+] a)
{
  aa = (:double[+]) a;
  res = aa[iv];
  return((:cpx) res);
}


int main()
{
  b = create([20,20]);
  /*  
  c = b + b;
  d = b * c;

  e = Transpose([2,1,0], d);
  
  return( fun(b));
  */
  
  q = genarray([20],2);
  
  p = TakeScatter([3],[2],q);
  
  /*
  e = b[[0]];
  */
  return(0);
  
}
