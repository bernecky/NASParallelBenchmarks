import Array: all;
import StdIO: all; 
import Math: all;
import ArrayIO: all;

#if 0
#define NX 256
#define NY 256
#define NZ 128
#define NX_2 128
#define ITER 6
#define NEXP 256
#define N 1

#define CLASS_A
#else
#define NX 4
#define NY 4
#define NZ 4
#define NX_2 2
#define ITER 4
#define NEXP 8
#define N 1

#define CLASS_A
#endif

/************************** cpx **********************/

typedef double[2] cpx;

/*inline*/ 
cpx[*] sel(int[.] sv, cpx[*] a){
  res = dbl2cpx(cpx2dbl(a)[sv]);
  return (res);
}

/*inline*/
cpx[*] sel(int sv, cpx[*] a){
  res = dbl2cpx(cpx2dbl(a)[sv]);
  return (res);
}

/*inline*/
cpx zero()
{
  return(dbl2cpx([0d,0d]));
}

/*inline*/
int[.] shape(cpx[*] a){
  return(shape(drop([-1], cpx2dbl(a))));
}
/*
int[3] shape(cpx[.,.,.] a){
  a = shape(cpx2dbl(a));
  return([a[[0]], a[[1]], a[[2]]]);
}
*/

/*inline*/
double[2] cpx2dbl(cpx c)
{
  return((:double[2]) c);
}

/*inline*/
double[+] cpx2dbl(cpx[+] c)
{
  return((:double[+]) c);
}

/*inline*/
cpx dbl2cpx(double[2] d)
{
  return((:cpx) d);
}

/*inline*/
cpx dbl2cpx(double d)
{
  return(dbl2cpx([d, 0d]));
}

/*inline*/
cpx[+] dbl2cpx(double[+] d)
{
  return((:cpx[+]) d);
}

/*inline*/
cpx[*] modarray(cpx[*] a, int[.] v, cpx[*] d)
{
  ans = with {
    (v <= iv <= v) : d;
  } : modarray(a);
  return(ans);
}

/*inline*/
cpx[*] modarray(cpx[*] a, int v, cpx[*] d)
{
  ans = with {
    ([v] <= iv <= [v]) : d;
  } : modarray(a);
  return(ans);
}

/*inline*/
cpx i()
{
  return(dbl2cpx([0d,1d]));
}

/*inline*/
cpx + (cpx a, cpx b) 
{
  x = (:double[2]) a;
  y = (:double[2]) b;
  
  res = [x[[0]]+y[[0]] , x[[1]]+y[[1]]];
  
  return((:cpx)res);
}

/*inline*/
cpx - (cpx a, cpx b) 
{
  x = (:double[2]) a;
  y = (:double[2]) b;
  
  res = [x[[0]]-y[[0]] , x[[1]]-y[[1]]];
  
  return((:cpx)res);
}

/*inline*/
cpx * (cpx a, cpx b) 
{
  x = (:double[2]) a;
  y = (:double[2]) b;
  
  res = [x[[0]]*y[[0]] - x[[1]]*y[[1]], x[[0]]*y[[1]] + x[[1]]*y[[0]]];
  
  return((:cpx)res);
}

/*inline*/
cpx[+] + (cpx[+] a, cpx[+] b)
{

  res = with {
    (.<=iv<=.) : a[iv] + b[iv];
  } : genarray(shape(a), zero()); 
  
  return(res);
}

/*inline*/
cpx[+] - (cpx[+] a, cpx[+] b)
{

  res = with {
    (.<=iv<=.) : a[iv] - b[iv];
  } : genarray(shape(a), zero()); 
  
  return(res);
}

/*inline*/
cpx * (double a, cpx b)
{
  bd = cpx2dbl( b);
  r  = bd * a;

  return(dbl2cpx(r));
}

/*inline*/ 
cpx / (cpx X1, cpx X2)
{
  Z = ((:double[2])X2)[[0]] ScalarArith::* ((:double[2])X2)[[0]]
    ScalarArith::+ ((:double[2])X2)[[1]] ScalarArith::* ((:double[2])X2)[[1]];

  return((:cpx)[(((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[0]]
                 ScalarArith::+ ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[1]])
                ScalarArith::/ Z,
                (((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[0]]
                 ScalarArith::- ((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[1]])
                ScalarArith::/ Z]);
}

/*inline*/
cpx[+] / (cpx[+] a, cpx b)
{
  ans = with {
    (. <= iv <= .) : a[iv] / b;
  } : genarray(shape(a), zero());

  return(ans);
}

/*inline*/
cpx[+] * (cpx[+] a, cpx[+] b)
{
  aa = cpx2dbl( a);
  bb = cpx2dbl( b);
  
  ub_real = shape(aa);
  ub_real[shape(ub_real) - 1] = 1;
  
  lb_imag = 0 * shape(aa);
  lb_imag[shape(lb_imag) - 1] = 1;
  
  res = with {
    (. <= iv < ub_real) {
      lb_imag = 0 * shape(aa);
      lb_imag[shape(lb_imag) - 1] = 1;
      
      val = aa[iv] * bb[[iv[[0]],iv[[1]]]] - 
        aa[iv+lb_imag] * bb[[iv[[0]],iv[[1]]+1]];
    } : val;
  } : genarray(shape(aa), 0d);
  
  res = with {
    (lb_imag <= iv <= .) {
      lb_imag = 0 * shape(aa);
      lb_imag[shape(lb_imag) - 1] = 1;
      
      val = aa[iv-lb_imag] * bb[[iv[[0]],iv[[1]]]] + 
        aa[iv] * bb[[iv[[0]],iv[[1]]-1]];
    } : val;
  } : modarray( res);  

  return( dbl2cpx(res));
}

/*inline*/
cpx[+] concat(cpx[+] a, cpx[+] b)
{
  aa = cpx2dbl(a);
  bb = cpx2dbl(b);
  
  r = aa ++ bb;
  
  return((:cpx[+]) r);
}

/*inline*/ cpx[+] Transpose( int[+] permv, cpx[+] A)
{
  res = with {
    ( .<= iv <= .) {
      ivt = TransposeSelect( permv, iv);
      val = A[ivt];
    } : val;
  } : genarray([shape(A)[[permv[[0]]]],
                shape(A)[[permv[[1]]]],
                shape(A)[[permv[[2]]]]], 
               zero());

  return(res);
}

/*inline*/ int[+] InvertPermVect(int[+] pv) 
{
  pv_inv = with {
    (. <= iv <= .) {
      val = 0;
      for (i=0; i<shape(pv)[[0]]; i++) {
        if (pv[[i]] == iv[[0]]) {
          val = i;
        }
      }
    } : val;
  } : modarray(pv);

  return(pv_inv);
}

/*inline*/ int[+] TransposeSelect( int[+] permv, int[+] indexv)
{
  permv_inv = InvertPermVect(permv);
  
  res = with {
    (. <= iv < shape(permv)) : indexv[[permv_inv[iv]]]; 
  } : modarray( indexv);
  
  return( res);
}

/*inline*/
cpx[+] psi(int[+] iv, cpx[+] a)
{
  ad = cpx2dbl(a);
  rd = ad[iv];
  
  return( dbl2cpx(rd));
}

/*inline*/
cpx[+] unscatter( int str, cpx[+] r)
{
  rn = with {
    (. <= iv <= .) {
      rd = cpx2dbl(r[iv]);
      rd *= [tod(str), 1d];
    } : dbl2cpx(rd);
  } : genarray(shape(r)/str, zero());

  return(rn);
}

cpx[+] scatter( int str, cpx[+] rn)
{
  r = with {
    (. <= iv <= . step [str,str,str]) : rn[iv/str];
  } : genarray( str * shape(rn), zero());

  return( r);
}

/*inline*/
cpx[+] rotate( int d, int offset, cpx[+] a)
{
  ad = cpx2dbl(a);
  rd = rotate( d, offset, ad);
  return( dbl2cpx(rd));
}

void print(cpx[+] c){
  print(shape(c));
  _print(c);
}

void _print(cpx[.] c){
  printf("[ ");
  a = with {
    (0 <= [i] < shape(c)[[0]]) {
       print(c[i]);
    } : 0;
  } : genarray(shape(c)[[0]], 0);
  printf("]\n");
}

void _print(cpx[*] c){
  printf("[ \n");
  a = with {
    (0 <= [i] < shape(c)[[0]]) {
      _print(c[i]);
    } : 0;
  } : genarray(shape(c)[[0]], 0);
  printf("]\n");
}

/*inline*/
void print(cpx c)
{
  cd = cpx2dbl(c);
  printf("(%.10g , %.10g)", cd[[0]], cd[[1]]);
}

cpx[+] DO_NOT_FOLD(cpx[+] c)
{
  return(c);
}

/************************** former support lib **********************/
/*inline*/ double my_mod(double a, double b, double d1, double d2)
{
  a1=floor(a/d2);
  a2=a-d2*a1;
  b1=floor(b/d2);
  b2=b-d2*b1;
  t1=a1*b2+a2*b1;
  t2=floor(t1/d2);
  t3=t1-d2*t2;
  t4=d2*t3+a2*b2;
  t5=floor(t4/d1);
  c=t4-d1*t5;
  
  return(c);
}

/* calculates the k-th random element corresponding to int[+] iv */

/*inline*/ double rand_element(int[4] iv,int[4] sh, double seed,
                           double c1, double c2, double c3, double a)
{

  index = iv[3]+sh[3]*(iv[0]+sh[0]*(iv[1]+iv[2]*sh[1])) + 1;
  k= index;
  m=toi(ceil( log(tod(k)) / log(2.0) )); /* let m be the smallest Integer */
  if ( toi(pow(2.0,tod(m))) == k )          /* such that  2^m > k */
    m=m+1;                               /* m sizes the for-loop */
  
  b = seed;                       /* init some variables */
  t = a;

  
  for (i=1 ; i<=m ; i++) {
    j = k/2;
    
    if (2*j != k)
      b = my_mod( b , t , c1,c3);    
    t = my_mod(t , t ,c1,c3);
    k=j;
  }
  
  return( b*c2);

}

/* Init A with pseudorandom numbers defined by NAS
 * To get the right order of pseudorandom numbers, each must be 
 * calculated seperatly
 */

/*inline*/ /*double[+] Initialize2(double[+] A)
{
  a = pow(5d,13d);   
  const1 = pow(2.0,46.0);
  const2 = pow(2.0,-46.0);
  const3 = pow(2d,23d);

  seed = 314159265d;               /* some consts */

  A = with {
    (.<=iv<=.){
      res = rand_element( iv, shape(A), seed, const1, const2, const3, a);
    } : res;
  } : modarray( A);
  


  return(A);
} 
*/



/* Init A with pseudorandom numbers defined by NAS
 * Calculated sequentielly 
 */


/*inline*/ cpx[+] Initialize()
{
  A = genarray([NX,NY,NZ,2], 0d);
  
  seed=314159265d;
  rand = seed;
  a = pow(5d,13d);   
  const1 = pow(2d,46d);
  const2 = pow(2d,-46d);
  const3 = pow(2d,23d);

  for(z=0 ; z <NZ  ; z++) {
    for(y=0 ; y <NY  ; y++) {
      for(x=0 ; x <NX  ; x++) {
	for(i=0 ; i<2 ; i++) {
	  rand = my_mod (a , rand, const1, const3) ;
          A[x,y,z,i] = rand * const2 ;
	}
      }
    }
  }

  return(dbl2cpx(A));
} 





/* The indexmap[+] is used for evolve(), and has to be calculated once */
/* compute function from local (i,j,k) to i^2+j^2+k^2 */
/* for time evaluation exponent */

/*********** no inlining possible ******************/

int[+] ComputeIndexMap()
{
  map = genarray( [NX,NY,NZ], 0);
  map = with {
    (. <= iv <= .) {
      iv_scramble = ((iv + shape(map) / 2) % shape(map)) - shape(map) / 2;
      val = sum( iv_scramble*iv_scramble);
    } : val;
  } : modarray( map);

  return(map);
}


/* some exponential terms will be precomputed.
 * They are used in Evolve() for time-evaluation
 */

double[+] ComputeExponentialMap()
{
  map = genarray([NEXP], 0d);
  
  alpha = -4d * pow(10d,-6d) * pi() * pi();

  map[[0]] = 1d;
  map[[1]] = exp(alpha);

  for (i=2; i<shape(map)[[0]]; i++ ) {
    map[[i]] = map[[i-1]] * map[[i-2]]; /* Check this CAJ*/
  }
  
  return(map);
}





/* Initializes the double[+] u with sines and cosines  
 * so called Roots Of Unity. Used by ComplexFFT()
 */

cpx[+] RootsOfUnity( double dir)
{
  u = dbl2cpx(genarray([NX_2,2], 0d));
  
  theta = dir * pi() / tod(shape(u)[[0]]);
  wp = dbl2cpx([cos(theta) - 1d , sin(theta)]  );

  u[0]=dbl2cpx([1d,0d]);

  for (i=1; i<shape(u)[0] ; i++) {
    last = u[[i-1]];
    current = last * wp + last;
    u[[i]] = current;
  }
    
  return(u); 
}




/* Here the time-evaluation is done 
 */

/*inline*/ cpx[+] Evolve( cpx[+] V, int t, int[+] index, double[+] expo)
{
  Vd = cpx2dbl(V);
  
  res = with {
    (. <= iv=[i,j,k,l] <= .) {
      newindex = t*index[i,j,k];
      exponent = expo[[newindex]];
      val = Vd[iv] * exponent;
    } : val;
  } : modarray( Vd);

  return( dbl2cpx(res));
}


/* Calculate the sum of 1024 elements for verification
 */



/*inline*/
cpx Checksum( cpx[+] XX)
{
  X = cpx2dbl(XX);
  
  result_r = 0d;
  result_i = 0d;

  for (j=0 ; j<1024 ; j++) {
    q = j % shape(X)[0];
    r = (3 * j) % shape(X)[[1]];
    s = (5 * j) % shape(X)[[2]];
    result_r += X[[q,r,s,0]];
    result_i += X[[q,r,s,1]];
  }
  
  return(dbl2cpx([result_r, result_i]));
}


/* This Function returns the precomputed correct values for each 
 * Class. 
 */


/*inline*/
cpx Validate(int iter)
{

#ifdef CLASS_U    /* Userdefined */
  V = reshape([6,2],[0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,]);

#endif

#ifdef CLASS_T
  V = reshape([6,2],[
		     537.7889159453D,603.2787954587D,
		     537.2168198787D,602.3341297470D,
		     536.6548010284D,601.4013243123D,
		     536.1026866643D,600.4802068635D,
		     535.5603071923D,599.5706078797D,
		     535.0274960928D,598.6723605623D]);

#endif


#ifdef CLASS_S
  V = reshape([6,2],[
		     554.6087004964D,484.5363331978D,
		     554.6385409189D,486.5304269511D,
		     554.6148406171D,488.3910722336D,
		     554.5423607415D,490.1273169046D,
		     554.4255039624D,491.7475857993D,
		     554.2683411902D,493.2597244941D]);
#endif



#ifdef CLASS_W
  V =  reshape([6,2],[
                     567.3612178944D,529.3246849175D,
                     563.1436885271D,528.2149986629D,
                     559.4024089970D,527.0996558037D,
                     556.0698047020D,526.0027904925D, 
                     553.0898991250D,524.9400845633D,
                     550.4159734538D,523.9212247086D]);
#endif     

#ifdef CLASS_A
  V=reshape([6,2],[
		   504.6735008193,511.4047905510,
		   505.9412319734,509.8809666433,
		   506.9376896287,509.8144042213,
		   507.7892868474,510.1336130759,
		   508.5233095391,510.4914655194,
		   509.1487099959,510.7917842803]);
#endif     


#ifdef CLASS_B
  V = reshape([20,2],[
		      517.7643571579,507.7803458597,
		      515.4521291263,508.8249431599,
		      514.6409228649,509.6208912659,
		      514.2378756213,510.1023387619, 
		      513.9626667737,510.3976610617,
		      513.7423460082,510.5948019802,
		      513.5547056878,510.7404165783,
		      513.3910925466,510.8576573661,  
		      513.2470705390,510.9577278523,
		      513.1197729984,511.0460304483,
		      513.0070319283,511.1252433800, 
		      512.9070537032,511.1968077718,
		      512.8182883502,511.2616233064,
		      512.7393733383,511.3203605551,  
		      512.6691062020,511.3735928093, 
		      512.6064276004,511.4218460548,
		      512.5504076570,511.4656139760,
		      512.5002331720,511.5053595966,
		      512.4551951846,511.5415130407,
		      512.4146770029,511.5744692211]);
   
#endif 

    

return(dbl2cpx(V[[iter-1]]));
}


/************************** Shuffle operations **********************/



/*inline*/ cpx[+] ShuffleLeft(cpx[+] vv)
{
  v=cpx2dbl(vv);
  
  res = with {
    (.<=[i,j]<=.) : v[i*2,j];
  } : genarray(shape(v) / 2 +[0,1], 0d);
  
 return( dbl2cpx(res));
}



/*inline*/ cpx[+] ShuffleRight(cpx[+] vv)
{
 v=cpx2dbl(vv);
  
 res = with {
   (.<=[i,j]<=.) : v[i*2+1,j];
 } : genarray(shape(v) / 2 +[0,1], 0d);

 return( dbl2cpx(res));
}

cpx[+] drop(int[.] v, cpx[+] a){
  b = cpx2dbl(a);
  c = drop(v ++ [0], b);
  return(dbl2cpx(c));
}

/************************** BEGIN OF FFT-Kernel**********************/


/* Test Removal */
/*
cpx[4] FFT1d(double dir, cpx[4] vv, cpx[NX_2] rofu)
{  
  v0 = vv[[0]];
  v1 = vv[[1]];
  v2 = vv[[2]];
  v3 = vv[[3]];
  
  w0 = v0 + v2;
  w1 = v0 - v2;
  w2 = v1 + v3;
  w3 = dir * i() * ( v1 - v3 );


  t0 = w0 + w2;
  t1 = w1 + w3;
  t2 = w0 - w2;
  t3 = w1 - w3;

  ans = [t0, t1, t2, t3];

  return( ans);
}
*/

cpx[+] MultRofu(cpx[+] v, cpx[+] rofu)
{
  select_rofu = unscatter((shape(rofu) / shape(v))[[0]], rofu);
  
  prod = v * select_rofu;

  return( prod);
}


/*inline*/ cpx[2] FFT1d(double dir, cpx[2] v, cpx[1] rofu){

  res = [v[[0]] + v[[1]], v[[0]] - v[[1]]];
  
  return( res);
}

cpx[.] FFT1d(double dir, cpx[.] v, cpx[.] rofu)
{
  left_v      = unscatter(2, v);
  right_v     = unscatter(2, drop([1], v));
  
  fft_left  = FFT1d(dir, left_v,  rofu);
  fft_right = FFT1d(dir, right_v, rofu);
  
  fft_right = MultRofu( fft_right, rofu);
  
  res = concat( fft_left + fft_right, fft_left - fft_right);

  return( res);
} 

/* slices array in direction (k), calculates fft(), */
/* reassebles slices to array */
specialize 
cpx[NX,NY,NZ] FFT1d_Slice(double dir, cpx[NX,NY,NZ] a, cpx[NX_2] rofu);
specialize 
cpx[NY,NZ,NX] FFT1d_Slice(double dir, cpx[NY,NZ,NX] a, cpx[NX_2] rofu);
specialize 
cpx[NZ,NX,NY] FFT1d_Slice(double dir, cpx[NZ,NX,NY] a, cpx[NX_2] rofu);
specialize 
cpx[NX,NZ,NY] FFT1d_Slice(double dir, cpx[NX,NZ,NY] a, cpx[NX_2] rofu);
specialize 
cpx[NZ,NY,NX] FFT1d_Slice(double dir, cpx[NZ,NY,NX] a, cpx[NX_2] rofu);
specialize 
cpx[NY,NX,NZ] FFT1d_Slice(double dir, cpx[NY,NX,NZ] a, cpx[NX_2] rofu);
cpx[.,.,.] FFT1d_Slice( double dir, cpx[.,.,.] a, cpx[.] rofu)
{ 
  print(shape(a));
  print(a);
  result = with {
    ([0,0] <= iv <= [shape(a)[0],shape(a)[1]]) {
      print(iv);
    } : FFT1d(dir, a[iv], rofu);
  } : modarray(a);

  return( result);
}

/************** THIS IS THE TOP-LEVEL FFT-Func **********************/


cpx[.,.,.] FFT3d_forward(cpx[.,.,.] a, cpx[.] rofu)
{ 
  a_t = Transpose( ([2,1,0]), a);
  b   = FFT1d_Slice( 1d, a_t, rofu);
  b_t = Transpose( ([0,2,1]),  b);
  c   = FFT1d_Slice( 1d, b_t, rofu);
  c_t = Transpose( ([1,2,0]),  c);
  d   = FFT1d_Slice( 1d, c_t, rofu);

  return( d);
}

/*inline*/ cpx[.,.,.] FFT3d_inverse(cpx[.,.,.] a, cpx[.] rofu)
{ 
  u   = FFT1d_Slice( -1d, a, rofu); 
  u_t = Transpose( ([0,2,1]), u); 
  v   = FFT1d_Slice( -1d, u_t, rofu); 
  v_t = Transpose( ([2,1,0]), v);
  w   = FFT1d_Slice( -1d, v_t, rofu); 
  w_t = Transpose( ([2,0,1]), w);

  return( w_t);
}


void CheckResult(int iter, cpx[+] X)
{
  printf("Current checksum:  ");
  print( Checksum(X));
  printf("\nRequired checksum: ");
  print( Validate(iter));
  printf("\n");
}


int main()
{ 
  total_size = NX*NY*NZ;
  printf(" Dimension: %d x %d x %d, N-Iter: %d  Total Size: %d Complex\n",
         NX, NY, NZ, N, total_size);

  indexmap = ComputeIndexMap();
  expomap  = ComputeExponentialMap();
  rofu     = RootsOfUnity( 1d); 

  U = Initialize();

  V = FFT3d_forward( U, rofu);

  rofu = RootsOfUnity( -1d); 


  /*****  Performing N iterations for timestep t *****************/

  for (t=1 ; t<=N ; t++) {
    
    W = Evolve( V, t, indexmap, expomap);
 
    X = FFT3d_inverse( W, rofu) / dbl2cpx(tod(total_size));

    CheckResult(t, X);
  }
  
  return(0);
}
