import Array: all;
import StdIO: all; 
import Math: all;
import ArrayIO: all;
import Complex: all;

#define NX 256
#define NY 256
#define NZ 128
#define NX_2 128
#define ITER 6
#define NEXP 256

#define CLASS_A

Complex::complex[*] toc(double[*,2] a){
  b = with{
    (. <= iv <= .) {
      l = a[iv++[0]];
      r = a[iv++[1]];
    } : toc(l, r);
  } : genarray(drop([-1], shape(a)), zero());

  return(b);
}

specialize double[.] todv(Complex::complex[.] a);
specialize double[.,.] todv(Complex::complex[.,.] a);
specialize double[.,.,.] todv(Complex::complex[.,.,.] a);
/*inline*/ double[+] todv(Complex::complex[+] a)
{
  r = with {
    (. <= iv <= .) : todv(a[iv]);
  } : genarray(shape(a), [0,0]); 
  return(r);
}

/*inline*/
Complex::complex[.,.,.] Transpose( 
                                  int[3] permv, 
                                  Complex::complex[.,.,.] A)
{  
  res = with{
    (. <= iv <= .) {
      r = A[
            iv[permv[0]],
            iv[permv[1]],
            iv[permv[2]]
      ];
    } : r;
  } : genarray([
                shape(A)[permv[0]],
                shape(A)[permv[1]],
                shape(A)[permv[2]]
                ], one());
  return(res);
}

/*inline*/
Complex::complex[+] unscatter(int str, Complex::complex[+] r)
{
  rn = with {
    (. <= iv <= .) : toc(todv(r[iv*str])[[0]], todv(r[iv])[[1]]);
  } : genarray(shape(r) / str, toc(0.0));

  return( rn);
}

void print(Complex::complex c)
{
  cd = todv(c);
  printf("(%.10g , %.10g)", cd[[0]], cd[[1]]);
}

/************************** former support lib **********************/

inline
double my_mod(double a, double b, double d1, double d2)
{
  a1=floor(a/d2);
  a2=a-d2*a1;
  b1=floor(b/d2);
  b2=b-d2*b1;
  t1=a1*b2+a2*b1;
  t2=floor(t1/d2);
  t3=t1-d2*t2;
  t4=d2*t3+a2*b2;
  t5=floor(t4/d1);
  c=t4-d1*t5;
  
  return(c);
}



/* Init A with pseudorandom numbers defined by NAS
 * Calculated sequentielly 
 */

/*inline*/
Complex::complex[NX,NY,NZ] Initialize()
{
  A = genarray([NX,NY,NZ], toc(0.0));
  B = genarray([NX,NY,NZ,2], 0.0);
  
  seed=314159265d;
  rand = seed;
  a = pow(5d,13d);   
  const1 = pow(2d,46d);
  const2 = pow(2d,-46d);
  const3 = pow(2d,23d);

  n1=shape(A)[[0]];
  n2=shape(A)[[1]];
  n3=shape(A)[[2]];

  for(z=0 ; z <n3  ; z++) {
    for(y=0 ; y <n2  ; y++) {
      for(x=0 ; x <n1  ; x++) {
        rand = my_mod (a , rand, const1, const3) ;
        r1 = rand * const2 ;
        rand = my_mod (a , rand, const1, const3) ;
        r2 = rand * const2 ;
        /*B[x,y,z,0] = r1;
          B[x,y,z,1] = r2;*/
        A[x,y,z] = toc(r1,r2);
      }
    }
  }
  /*  A = toc(B); */
  return(A);
} 





/* The indexmap[+] is used for evolve(), and has to be calculated once */
/* compute function from local (i,j,k) to i^2+j^2+k^2 */
/* for time evaluation exponent */

/*********** no inlining possible ******************/

#if 1

int[NX,NY,NZ] ComputeIndexMap()
{
  map = with {
    (.<=iv=[i,j,k]<=.) {
      ii = ( (i+NX/2) % NX ) - NX/2;
      jj = ( (j+NY/2) % NY ) - NY/2;
      kk = ( (k+NZ/2) % NZ ) - NZ/2;
      ttt = ii*ii+jj*jj+kk*kk;
    } : ttt;
  } : genarray( [NX,NY,NZ], 0);

  return(map);
}

#else
/*
 * The problem here is that the primitive array operations are used for
 * integer vectors and hence no withloop folding applies to the body.
 */
int[NX,NY,NZ] ComputeIndexMap()
{
  map = genarray( [NX,NY,NZ], 0);
  map = with {
    (. <= iv <= .) {
      iv_scramble = ((iv + shape(map) / 2) % shape(map)) - shape(map) / 2;
      val = sum( iv_scramble*iv_scramble);
    }: val;
  } : modarray( map);

  return(map);
}
#endif



/* some exponential terms will be precomputed.
 * They are used in Evolve() for time-evaluation
 */
/*inline*/
double[NEXP] ComputeExponentialMap()
{
  map = genarray([NEXP], 0d);
  
  alpha = -4d * pow(10d,-6d) * pi() * pi();

  map[[0]] = 1d;
  map[[1]] = exp(alpha);

  for (i=2; i<shape(map)[[0]]; i++ ) {
    map[[i]] = map[[i-1]] * map[[1]];
  }
  
  return(map);
}





/* Initializes the double[+] u with sines and cosines  
 * so called Roots Of Unity. Used by ComplexBasics::ComplexFFT()
 */
/*inline*/
Complex::complex[NX_2] RootsOfUnity( double dir)
{
  u = genarray([NX_2], toc(0.0));
  
  theta = dir * pi() / tod(shape(u)[[0]]);
  wp = toc(cos(theta) - 1d , sin(theta));

  u[0]= toc(1d,0d);

  for (i=1; i<shape(u)[[0]] ; i++) {
    last = u[[i-1]];
    current = last * wp + last;
    u[[i]] = current;
  }
    
  return(u); 
}




/* Here the time-evaluation is done 
 */
/*inline*/
Complex::complex[.,.,.] Evolve( 
                               Complex::complex[.,.,.] V, 
                               int t, 
                               int[.,.,.] index, 
                               double[.] expo)
{  
  res = with {
    (. <= iv <= .) {
      newindex = t*index[iv];
      exponent = expo[[newindex]];
      val = V[iv] * toc(exponent);
    } : val;
  } : genarray(shape(V), toc(1));

  return( res);
}


/* Calculate the sum of 1024 elements for verification
 */
/*inline*/
Complex::complex Checksum( Complex::complex[.,.,.] XX)
{  
  result = zero();

  for (j=0 ; j<1024 ; j++) {
    q = j % shape(XX)[[0]];
    r = (3 * j) % shape(XX)[[1]];
    s = (5 * j) % shape(XX)[[2]];
    result += XX[[q,r,s]];
  }
  
  return(result);
}


/* This Function returns the precomputed correct values for each 
 * Class. 
 */

/*inline*/
Complex::complex Validate(int iter)
{

#ifdef CLASS_U    /* Userdefined */
  V = reshape([6,2],[0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D]);

#endif

#ifdef CLASS_T
  V = reshape([6,2],[
		     537.7889159453D,603.2787954587D,
		     537.2168198787D,602.3341297470D,
		     536.6548010284D,601.4013243123D,
		     536.1026866643D,600.4802068635D,
		     535.5603071923D,599.5706078797D,
		     535.0274960928D,598.6723605623D]);

#endif


#ifdef CLASS_S
  V = reshape([6,2],[
		     554.6087004964D,484.5363331978D,
		     554.6385409189D,486.5304269511D,
		     554.6148406171D,488.3910722336D,
		     554.5423607415D,490.1273169046D,
		     554.4255039624D,491.7475857993D,
		     554.2683411902D,493.2597244941D]);
#endif



#ifdef CLASS_W
  V =  reshape([6,2],[
                     567.3612178944D,529.3246849175D,
                     563.1436885271D,528.2149986629D,
                     559.4024089970D,527.0996558037D,
                     556.0698047020D,526.0027904925D, 
                     553.0898991250D,524.9400845633D,
                     550.4159734538D,523.9212247086D]);
#endif     

#ifdef CLASS_A
  V=reshape([6,2],[
		   504.6735008193,511.4047905510,
		   505.9412319734,509.8809666433,
		   506.9376896287,509.8144042213,
		   507.7892868474,510.1336130759,
		   508.5233095391,510.4914655194,
		   509.1487099959,510.7917842803]);
#endif     


#ifdef CLASS_B
  V = reshape([20,2],[
		      517.7643571579,507.7803458597,
		      515.4521291263,508.8249431599,
		      514.6409228649,509.6208912659,
		      514.2378756213,510.1023387619, 
		      513.9626667737,510.3976610617,
		      513.7423460082,510.5948019802,
		      513.5547056878,510.7404165783,
		      513.3910925466,510.8576573661,  
		      513.2470705390,510.9577278523,
		      513.1197729984,511.0460304483,
		      513.0070319283,511.1252433800, 
		      512.9070537032,511.1968077718,
		      512.8182883502,511.2616233064,
		      512.7393733383,511.3203605551,  
		      512.6691062020,511.3735928093, 
		      512.6064276004,511.4218460548,
		      512.5504076570,511.4656139760,
		      512.5002331720,511.5053595966,
		      512.4551951846,511.5415130407,
		      512.4146770029,511.5744692211]);
   
#endif 

    

return(toc(V[[iter-1]]));
}

/************************** BEGIN OF FFT-Kernel**********************/
/*inline*/
/*
Complex::complex[4] FFT1d(
                          double dir, 
                          Complex::complex[4] v, 
                          Complex::complex[2] rofu)
{
  left_v      = unscatter(2, v);
  right_v     = unscatter(2, rotate(0, -1, v));
  rofu_select = unscatter(2, rofu);
  
  fft_left  = FFT1d(dir, left_v,  rofu_select);
  fft_right = FFT1d(dir, right_v, rofu_select);
  
  fft_right *= rofu;
  
  /*  res = with {
    (0 <= [i] <= 1) : fft_left + fft_right;
    (2 <= [i] <= 3) : fft_left - fft_right;
    } : genarray([4], toc(0));*/

  res = (fft_left + fft_right) ++ (fft_left - fft_right);
  return( res);
} 
*/
/*inline*/
Complex::complex[2] FFT1d(
                          double dir, 
                          Complex::complex[2] v, 
                          Complex::complex[1] rofu)
{
  return(v*[toc(0),rofu[[0]]]);
} 

/*inline*/
Complex::complex[.] FFT1d(
                          double dir, 
                          Complex::complex[.] v, 
                          Complex::complex[.] rofu)
{
  left_v      = unscatter(2, v);
  right_v     = unscatter(2, rotate(0, -1, v));
  rofu_select = unscatter(2, rofu);
  
  fft_left  = FFT1d(dir, left_v,  rofu_select);
  fft_right = FFT1d(dir, right_v, rofu_select);
  
  fft_right *= rofu;
  
  res = (fft_left + fft_right) ++ (fft_left - fft_right);

  return( res);
} 

/* slices array in direction (k), calculates fft(), */
/* reassebles slices to array */

/*inline*/
Complex::complex[.,.,.] FFT1d_Slice(
                                double dir, 
                                Complex::complex[.,.,.] a, 
                                Complex::complex[.] rofu)
{ 
  if (2*shape(rofu)[[0]] / shape(a)[[2]] > 1) {
    rofu_select = unscatter(
                            (
                             (
                              [2,1]*shape(rofu)
                              ) / 
                             [shape(a)[[2]],shape(a)[[3]]]
                             )[[0]],
                             rofu);
    result = with {
      ( [0,0] <= iv < [shape(a)[[0]],shape(a)[[1]]] ) {
        val = FFT1d(dir, a[iv], rofu_select);
      } : val; 
    } : modarray( a);
  }
  else {
    result = with {
      ( [0,0] <= iv < [shape(a)[[0]],shape(a)[[1]]] ) {
        val = FFT1d(dir, a[iv], rofu);
      } : val;
    } : modarray( a);
  }
  

  return( result);
}



/************** THIS IS THE TOP-LEVEL FFT-Func **********************/


Complex::complex[.,.,.] FFT3d_forward(
                                      Complex::complex[.,.,.] a, 
                                      Complex::complex[.] rofu)
{ 
  printf("0.1\n");
  a_t = Transpose( [2,1,0], a);
  printf("0.2\n");
  b   = FFT1d_Slice( 1d, a_t, rofu);
  printf("0.3\n");
  b_t = Transpose( [0,2,1],  b);
  printf("0.4\n");
  c   = FFT1d_Slice( 1d, b_t, rofu);
  printf("0.5\n");
  c_t = Transpose( [1,2,0],  c);
  printf("0.6\n");
  d   = FFT1d_Slice( 1d, c_t, rofu);
  printf("0.7\n");

  return( d);
}


Complex::complex[.,.,.] FFT3d_inverse(
                                      Complex::complex[.,.,.] a, 
                                      Complex::complex[.] rofu)
{ 

  printf("3.1\n");
  u   = FFT1d_Slice( -1d, a, rofu); 
  printf("3.2\n");
  u_t = Transpose([0,2,1], u); 
  printf("3.3\n");
  v   = FFT1d_Slice( -1d, u_t, rofu); 
  printf("3.4\n");
  v_t = Transpose([2,1,0], v);
  printf("3.5\n");
  w   = FFT1d_Slice( -1d, v_t, rofu); 
  printf("3.6\n");
  w_t = Transpose([2,0,1], w);
  printf("3.7\n");

  return( w_t);
}


void CheckResult(int iter, Complex::complex[.,.,.] X)
{
  printf("Current checksum:  ");
  print( Checksum(X));
  printf("\nRequired checksum: ");
  print( Validate(iter));
  printf("\n");
}


int main()
{ 
  total_size = NX*NY*NZ;
  printf(" Dimension: %d x %d x %d, N-Iter: %d  Total Size: %d complex\n",
         NX, NY, NZ, ITER, total_size);

  indexmap = ComputeIndexMap();
  expomap  = ComputeExponentialMap();
  rofu     = RootsOfUnity( 1d); 

  printf("Start Initialize\n");
  U = Initialize();
  printf("End Initialize\n");

  V = FFT3d_forward( U, rofu);

  rofu = RootsOfUnity( -1d); 


  /*****  Performing N iterations for timestep t *****************/

  for (t=1 ; t<=ITER ; t++) {
    printf("1\n");
    W = Evolve( V, t, indexmap, expomap);
 
    printf("2\n");
    X = FFT3d_inverse( W, rofu) / toc(total_size);

    CheckResult(t, X);
  }
  
  return(0);
}






