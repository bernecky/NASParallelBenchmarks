Module Support:

import Complex: all;
import Array: all;
import Math: all;







inline double my_mod(double a, double b, double d1, double d2)
  {
    a1=floor(a/d2);
    a2=a-d2*a1;
    b1=floor(b/d2);
    b2=b-d2*b1;
    t1=a1*b2+a2*b1;
    t2=floor(t1/d2);
    t3=t1-d2*t2;
    t4=d2*t3+a2*b2;
    t5=floor(t4/d1);
    c=t4-d1*t5;

    return(c);
  }







/* calculates the k-th random element corresponding to int[+] iv */

inline double rand_element(int[4] iv,int[4] sh,double seed,double c1, double c2, double c3, double a)
{

  index = iv[3]+sh[3]*(iv[0]+sh[0]*(iv[1]+iv[2]*sh[1])) + 1;
  k= index;
  m=toi(ceil( log(tod(k)) / log(2.0) )); /* let m be the smallest Integer */
  if ( toi(pow(2.0,tod(m))) == k )          /* such that  2^m > k */
    m=m+1;                               /* m sizes the for-loop */
  
  b = seed;                       /* init some variables */
  t = a;

  
  for (i=1 ; i<=m ; i++) {
    j = k/2;
    
    if (2*j != k)
      b = my_mod( b , t , c1,c3);    
    t = my_mod(t , t ,c1,c3);
    k=j;
  }
  
  return( b*c2);

}







/* Init A with pseudorandom numbers defined by NAS
 * To get the right order of pseudorandom numbers, each must be 
 * calculated seperatly
 */

inline double[NX,NY,NZ,2] Initialize2(double[NX,NY,NZ,2] A)
{
  a = pow(5.0d,13.0d);   
  const1 = pow(2.0,46.0);
  const2 = pow(2.0,-46.0);
  const3 = pow(2.0d,23.0d);

  seed = 314159265.0d;               /* some consts */
  A = with(.<=iv<=.){
    res=rand_element(iv,shape(A),seed,const1,const2,const3,a);
  } modarray(A,iv,res);
  


  return(A);
} 




/* Init A with pseudorandom numbers defined by NAS
 * Calculated sequentielly 
 */


inline double[NX,NY,NZ,2] Initialize1(double[NX,NY,NZ,2] A)
{
  double rand,rr,a,const1,const2;
 
  seed=314159265.0;
  rand = seed;
  a = pow(5.0,13.0);   
  const1 = pow(2.0,46.0);
  const2 =  pow(2.0,-46.0);
  const3 = pow(2.0d,23.0d);

  n1=shape(A)[0];
  n2=shape(A)[1];
  n3=shape(A)[2];
   for(z=0 ; z <n3  ; z++) {
    for(y=0 ; y <n2  ; y++) {
      for(x=0 ; x <n1  ; x++) {
	for(i=0 ; i<2 ; i++) {
	  rand = my_mod (a , rand,  const1,const3) ;
	A[x,y,z,i]=rand * const2 ;
	  
	}
      }
    }
  }
  return(A);
} 








/* The indexmap[+] is used for evolve(), and has to be calculated once */
/* compute function from local (i,j,k) to i^2+j^2+k^2 */
/* for time evaluation exponent */

/*********** no inlining possible ******************/
 int[NX,NY,NZ]	ComputeIndexmap(int[NX,NY,NZ] map)
{
  map = with(.<=iv=[i,j,k]<=.) {
    ii = ( (i+NX/2) % NX ) - NX/2;
    jj = ( (j+NY/2) % NY ) - NY/2;
    kk = ( (k+NZ/2) % NZ ) - NZ/2;
    ttt = ii*ii+jj*jj+kk*kk;
  } modarray(map,iv,ttt);

  return(map);
}




/* some exponential terms will be precomputed.
 * They are used in Evolve() for time-evaluation
 */


inline double[NEXP] ComputeExponentialmap(double[NEXP] map)
{
  alpha = pow(10.0d,-6.0d);
  ap = -4.0d * alpha * pi() * pi();
  map[0] = 1.0d;
  map[1] = exp(ap);

  for (i=2; i<shape(map)[0];i++ )
    map[i] = map[i-1] * map[1];

  return(map);

}







/* Initializes the double[+] u with sines and cosines  
 * so called Roots Of Unity. Used by ComplexFFT()
*/

inline double[NX_2,2] RootsOfUnity(double[NX_2,2] u,int dir)
{	
  theta = tod(dir) * pi() / tod(shape(u)[0]);
  wp = toc(cos(theta) - 1.0 , sin(theta)  );

  u[0]=[1.0d,0.0d];

  for (i=1; i<shape(u)[0] ; i++) {
    u[i] = todv( toc(u[i-1])*wp + toc(u[i-1]));
  }
    
  return(u); 
}



/* These Transpose_123_321() functions rotate the data, so indexed access
 * to all three dimensions is possible.
 */

#ifdef GENERIC

inline int[+] sel_ovr( int[+] iv, int[+] A)
{
  res = with( . <= ivp <= .)
        genarray( shape(iv)  , A[ iv[ivp]]);
  return( res);
}

#else

inline int[+] sel_ovr( int[3] iv, int[3] A)
{
  return( [A[iv[0]], A[iv[1]], A[iv[2]]]);
}

#endif

inline double[+] Transpose( int[+] v, double[+] A)
{
  res = with( .<= iv=[x,y,z] <= .)
        genarray([shape(A)[[v[[0]]]],shape(A)[[v[[1]]]],shape(A)[[v[[2]]]]], 
                 A[ sel_ovr( v, iv) ] );
  return( res);
}







/* Here the time-evaluation is done 
 */


inline double[NX,NY,NZ,2] Evolve(double[NX,NY,NZ,2] V,int t,int[+] index,double[NEXP] ex)
{

  V=with([0,0,0]<=iv=[i,j,k]<[NX,NY,NZ]) {
    newindex=t*index[i,j,k];
    exponent = ex[newindex];
    temp = toc(V[i,j,k]) * exponent;
  } modarray(V,iv,todv(temp));
  return(V);
}




/* Calculate the sum of 1024 elements for verification
 */



inline complex Checksum(double[NX,NY,NZ,2] X)
{
  complex result;
  n1=shape(X)[0];
  n2=shape(X)[1];
  n3=shape(X)[2];
  result=toc(0.0d,0.0d);
  for (j=0 ; j<1024 ; j++) {
    q= j % n1;
    r= (3 * j) % n2;
    s= (5 * j) % n3;
    result = result + toc(X[q,r,s]);
  }
  
  return(result);
}




/* This Function returns the precomputed correct values for each 
 * Class. 
 */



complex Validate(int iter)
{

#ifdef CLASS_U    /* Userdefined */
  V = reshape([6,2],[0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,
		     0D,0D,]);

#endif

#ifdef CLASS_T
  V = reshape([6,2],[
		     537.7889159453D,603.2787954587D,
		     537.2168198787D,602.3341297470D,
		     536.6548010284D,601.4013243123D,
		     536.1026866643D,600.4802068635D,
		     535.5603071923D,599.5706078797D,
		     535.0274960928D,598.6723605623D]);

#endif


#ifdef CLASS_S
  V = reshape([6,2],[
		     554.6087004964D,484.5363331978D,
		     554.6385409189D,486.5304269511D,
		     554.6148406171D,488.3910722336D,
		     554.5423607415D,490.1273169046D,
		     554.4255039624D,491.7475857993D,
		     554.2683411902D,493.2597244941D]);
#endif



#ifdef CLASS_W
  V =  reshape([6,2],[
                     567.3612178944D,529.3246849175D,
                     563.1436885271D,528.2149986629D,
                     559.4024089970D,527.0996558037D,
                     556.0698047020D,526.0027904925D, 
                     553.0898991250D,524.9400845633D,
                     550.4159734538D,523.9212247086D]);
#endif     

#ifdef CLASS_A
  V=reshape([6,2],[
		   504.6735008193,511.4047905510,
		   505.9412319734,509.8809666433,
		   506.9376896287,509.8144042213,
		   507.7892868474,510.1336130759,
		   508.5233095391,510.4914655194,
		   509.1487099959,510.7917842803]);
#endif     


#ifdef CLASS_B
  V = reshape([20,2],[
		      517.7643571579, 507.7803458597,
		      515.4521291263,508.8249431599,
		      514.6409228649,509.6208912659,
		      514.2378756213,510.1023387619, 
		      513.9626667737,510.3976610617,
		      513.7423460082,510.5948019802,
		      513.5547056878,510.7404165783,
		      513.3910925466,510.8576573661,  
		      513.2470705390,510.9577278523,
		      513.1197729984,511.0460304483,
		      513.0070319283,511.1252433800, 
		      512.9070537032,511.1968077718,
		      512.8182883502,511.2616233064,
		      512.7393733383,511.3203605551,  
		      512.6691062020,511.3735928093, 
		      512.6064276004,511.4218460548,
		      512.5504076570,511.4656139760,
		      512.5002331720,511.5053595966,
		      512.4551951846,511.5415130407,
		      512.4146770029,511.5744692211]);
   
#endif 

    

return(toc(V[iter-1]));
}
