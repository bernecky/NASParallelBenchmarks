import StdIO: all;
import Math: all;
import Array: all;

/*
 * The following defines are needed for "telling" the compiler 
 * all possible input sizes. For more information see "main".
 */

#define S0 2
#define S1 4
#define S2 8
#define S3 16
#define S4 32
#define S5 64
#define S6 128
#define S7 256


/*
 * The following flags are used to create different versions:
 * DISTRIB_LAW_BUG_IS_FIXED indicates whether the compiler is capable
 *   to apply distributive law (1) or not (0).
 * USE_SAME_SHORTCUT_AS_IN_FORTRAN indicates whether the algorithm patch
 *   used in the Fortran version of the benchmark in order to spare one
 *   copy of the largest array should be applied in SAC as well (1) or not (0).
 */

#define DISTRIB_LAW_BUG_IS_FIXED 0
#define USE_SAME_SHORTCUT_AS_IN_FORTRAN 1

/* 
 * Now, we define the arrays of weights needed for relaxation (A),
 * restriction (P), extension (Q), and smoothing (S).
 * In the NAS-MG benchmark, all these have a particular property:
 * weights with the same "distance" from the "center" do have the same
 * value! Therefore, in the 3-dimensional case, they can be described
 * by a vector containing 4 values: 
 * [ center, distance 1, distance 2, distance 3]
 *
 * Another consequence of this property is that for the computation
 * of the required weighted sums the distributive law is applicable,
 * which leads to a noticable speedup in program execution.
 * Since the FORTRAN program is hand-optimized to this effect,
 * we have to make sure that the distributive law optimization
 * of the SAC compiler is turned on!
 */

#define AP [ -8d/3d, 0d    , 1d/6d  , 1d/12d]
#define PP [ 1d/2d , 1d/4d , 1d/8d  , 1d/16d]
#define QP [ 1d    , 1d/2d , 1d/4d  , 1d/8d ]
#define SP [ -3d/8d, 1d/32d, -1d/64d, 0d    ]

#define SHP [3,3,3]

#if DISTRIB_LAW_BUG_IS_FIXED

#define A gen_weights( AP)
#define P gen_weights( PP)
#define Q gen_weights( QP)
#define S gen_weights( SP)

inline double[+] gen_weights( double[+] wp)
{
  res = with {
          ( . <= iv <= . )
          : off = with {
                    ( 0*shape(iv) <= ix < shape(iv) )
                    {
                      if ( iv[ix] != 1 )
                        dist = 1;
                      else
                        dist = 0;
                    } : dist;
                  } : fold( +, 0 );
        } : genarray( SHP, wp[[off]] );

  return( res);
}
#else

/*
 * Since the actual SAC2C compiler due to a bug does not support
 * distributive law optimization, a modified version of the function
 * that computes the weighted sums ("weighted_sum") has to be used
 * which is hand optimized to that effect.
 * As a consequence, A, P, Q, and S are not arrays of weights of shape
 * SHP, but are only the carriers of different values needed for the
 * particularities of the NAS-MG benchmark.
 */

#define A AP
#define P PP
#define Q QP
#define S SP

#endif


double l2norm( double[+] u)
{
  sqrsum = with {
             ( 0*shape(u) <= x < shape(u) ) : u[x]*u[x];
           } : fold( +, 0d );
  n_elem = with {
             ( [0] <= y < [dim(u)] ) : tod( shape(u)[y] );
           } : fold( *, 1d );

  return( sqrt( sqrsum/n_elem));
}





#if DISTRIB_LAW_BUG_IS_FIXED

inline double[+] relax_kernel( double[+] w, double[+] u)
{
  res = with {
          ( 0*shape(w) <= dx < shape(w) ) : rotate( dx-1, u ) * w[dx];
        } : fold( +, genarray( shape(u), 0d ) );

  return(res);
}

#else

double[+] relax_kernel( double[+] w, double[+] u)
{  return(  sel([0],w) * u
         + sel([1],w) * ( rotate( 0, 1, u) + rotate( 0, -1, u)
                      + rotate( 1, 1, u) + rotate( 1, -1, u)
                      + rotate( 2, 1, u) + rotate( 2, -1, u))
         + sel([2],w) * ( rotate( [1,1,0], u) + rotate( [-1,-1,0], u)
                      + rotate( [0,1,1], u) + rotate( [0,-1,-1], u)
                      + rotate( [1,0,1], u) + rotate( [-1,0,-1], u)
                      + rotate( [-1,1,0], u) + rotate( [1,-1,0], u)
                      + rotate( [0,-1,1], u) + rotate( [0,1,-1], u)
                      + rotate( [-1,0,1], u) + rotate( [1,0,-1], u))
         + sel([3],w) * ( rotate( [1,1,1], u) + rotate( [-1,-1,-1], u)
                      + rotate( [-1,1,1], u) + rotate( [1,-1,-1], u)
                      + rotate( [1,-1,1], u) + rotate( [-1,1,-1], u)
                      + rotate( [1,1,-1], u) + rotate( [-1,-1,1], u) ) );
}

#endif


double[+] relax( double[+] u, double[+] v)
{
  r = v - relax_kernel( A, u);
  return(r);
}

double[+] smooth( double[+] z, double[+] r)
{
  z = z + relax_kernel( S, r);
  return( z);
}

double[+] smooth( double[+] r)
{
  z = relax_kernel( S, r);
  return( z);
}

#if 0
/* requiers WLIR (included in ssa opts) */
double[+] fine2coarse( double[+] r)
{
  rn = with {
         ( . <= x <= . ) : relax_kernel( P, r )[2*x+1];
       } : genarray( shape(r) / 2 );

  return(rn);
}

#else
/* manual wlir... */
double[+] fine2coarse( double[+] r)
{
  lir_lift = relax_kernel( P, r);

  rn = with {
         ( . <= x <= . ) : lir_lift[2*x+1];
       } : genarray( shape(r) / 2, 0d );

  return(rn);
}
#endif

double[+] coarse2fine( double[+] rn)
{
  r = with {
        ( 0*shape(rn)+1 <= iv < 2*shape(rn) step 0*shape(rn)+2 ) : rn[(iv-1)/2];
      } : genarray( 2*shape(rn), 0d );
  
  r = relax_kernel( Q, r);
  return(r);
}



double[+] mgrid( double[+] r)
{ /*
   * non-coarsest grid: r(k-1) = P r(k)			(fine2coarse)
   *                    z(k-1) = M(k-1) r(k-1)		(recursive solve)
   *                    z(k)   = Q z(k-1)		(coarse2fine)
   *                    r(k)   = r(k) - A z(k)		(relax)
   *                    z(k)   = z(k) + S r(k)          (smooth)
   */
  rn = fine2coarse( r);
  zn = mgrid( rn);
  z  = coarse2fine( zn);
  r  = relax( z, r);
  z  = smooth( z, r);

  return(z);
}

double[S0,S0,S0] mgrid( double[S0,S0,S0] r)
{
  z = smooth( r);
  return( z);
}

double nas_mgrid( double[+] u, double[+] v, int[+] pos, int[+] neg, int iter)
{
  for( i=0; i<10; i++)
    v = modarray( v, neg[[i]] - 1, -1d);

  for( i=0; i<10; i++)
    v = modarray( v, pos[[i]] - 1, 1d);

  r = relax( u, v);

  i = 0;

  do {

#if USE_SAME_SHORTCUT_AS_IN_FORTRAN
    rn = fine2coarse(r);
    zn = mgrid(rn);
    u  = u + coarse2fine(zn);
    r  = relax(u, v);
    u  = smooth(u, r);
#else
    u  = u + mgrid( r);
#endif


    r  = relax( u, v);

    i += 1;
  }
  while( i<iter);

  z = l2norm( r);
  return(z);
}



/*
 * The tricky part of this program is that we want to run the same
 * executable on different array sizes without re-compilation.
 * Since the current compiler only accepts programs where all
 * shapes involved can be determined statically, we have to use
 * a nesting of conditionals in order to force the compiler
 * to generate the variants we are interested in.
 */
int main()
{
  int[10,3] pos;
  int[10,3] neg;

  size = (int) FibreScanIntArray();
  iter = (int) FibreScanIntArray();
  pos  = (int[10, 3]) FibreScanIntArray();
  neg  = (int[10, 3]) FibreScanIntArray();


  if(size == 256) {
    u_256 = with {
              ( [0,0,0] <= x <= [S7-1,S7-1,S7-1] ) : 0d;
            } : genarray( [S7,S7,S7] );
    
    v_256 = with {
              ( [0,0,0] <= x <= [S7-1,S7-1,S7-1] ) : 0d;
            } : genarray( [S7,S7,S7] );

    z = nas_mgrid(u_256, v_256, pos, neg, iter);
  }
  else{
    if(size == 128) {
      u_128 = with {
                ( [0,0,0] <= x <= [S6-1,S6-1,S6-1] ) : 0d;
              } : genarray( [S6,S6,S6] );

      v_128 = with {
                ( [0,0,0] <= x <= [S6-1,S6-1,S6-1] ) : 0d;
              } : genarray( [S6,S6,S6] );

      z = nas_mgrid(u_128, v_128, pos, neg, iter);
    }
    else {
      if(size == 64) {
        u_64 = with {
                 ( [0,0,0] <= x <= [S5-1,S5-1,S5-1] ) : 0d;
               } : genarray( [S5,S5,S5] );
        v_64 = with {
                 ( [0,0,0] <= x <= [S5-1,S5-1,S5-1] ) : 0d;
               } : genarray( [S5,S5,S5] );

        z = nas_mgrid(u_64, v_64, pos, neg, iter);
      }
      else{
        if(size == 4) {
          u_32 = with {
                   ( [0,0,0] <= x <= [S1-1,S1-1,S1-1] ) : 0d;
                 } : genarray( [S1,S1,S1] );
          v_32 = with {
                   ( [0,0,0] <= x <= [S1-1,S1-1,S1-1] ) : 0d;
                 } : genarray( [S1,S1,S1] );

          z = nas_mgrid(u_32, v_32, pos, neg, iter);
        }
        else {
          size = 0;
          iter = 0;
          z = 0d;
        }
      }
    }
  }

  printf( " L2-Norm after %d iteration(s) with max. grid [%d,%d,%d]: %.10e\n", 
          iter, size, size, size, z);

  return( 0);
}


