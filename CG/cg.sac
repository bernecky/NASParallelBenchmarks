/*
 *     C O N J U G A T E   G R A D I E N T   B E N C H M A R K
 *               S A C   S E R I A L     V E R S I O N
 *
 *
 *                 SAC Parallel Benchmark (SPB)
 *                           C G
 *
 * Conjugate Gradient (CG) benchmark is an important scientific kernel
 * used to evaluate machine performance and compare characteristics of
 * different programming models.
 *
 *
 * <--! compiling the bechmark for a class X :
 *          sac2c cg.sac -DCLASS=X     !-->
 */

#define S 1
#define W 2
#define A 3
#define B 4
#define C 5
#define D 6
#define E 7  // BEWARE! This class requires an array indexed by 64-bit int
             //         which currently is not possible in SaC!

#if defined (CLASS)
#if (CLASS == A)
#define CLASS_STR "A"
#define N 14000
#define NPP 14001   //N+1
#define NITER 15
#define LAMBDA 20
#define NONZER 11
#define NONZERPP 12  //NONZER+1
#define NZ 2016000   //N*NONZERPP*NONZERPP
#define ZETA_VERIFY_VALUE 17.130235054029d
#define RCOND 0.1d

#elif (CLASS == B)
#define CLASS_STR "B"
#define N 75000
#define NPP 75001
#define NITER 75
#define LAMBDA 60
#define NONZER 13
#define NONZERPP 14
#define NZ 14700000
#define ZETA_VERIFY_VALUE 22.712745482631d
#define RCOND 0.1d

#elif (CLASS == C)
#define CLASS_STR "C"
#define  N 150000
#define  NPP 150001
#define  NITER 75
#define  LAMBDA 110
#define  NONZER 15
#define  NONZERPP 16
#define  NZ 38400000
#define  ZETA_VERIFY_VALUE 28.973605592845d
#define  RCOND 0.1d

#elif (CLASS == D)
#define CLASS_STR "D"
#define  N 1500000
#define  NPP 1500001
#define  NITER 100
#define  LAMBDA 500
#define  NONZER 21
#define  NONZERPP 22
#define  NZ 726000000
#define  ZETA_VERIFY_VALUE 52.514532105794d
#define  RCOND 0.1d

#elif (CLASS == E)
#define CLASS_STR "E"
#define  N 9000000
#define  NPP 9000001
#define  NITER 100
#define  LAMBDA 1500
#define  NONZER 26
#define  NONZERPP 27
#define  NZ 6561000000
#define  ZETA_VERIFY_VALUE 77.522164599383d
#define  RCOND 0.1d
#else

#undef CLASS
#endif
#endif

import StdIO: all;
import Array: all;
import Math : all;

use RTimer: all;
use RandLC: all;

/*
 * Multiplying a Matrix formed by a triple:
 *      (a,rowstr,colidx) and a Vector "p"
 *
 * Input: a, rowstr, colidx,p
 * Output: r
 *
 */
inline
double[.] matvecmul( double[.] a, int[.] rowstr, int[.] colidx, double[.] p) {
  n = shape(p);
  q = with {
	([0] <= iv <n){
          res = with {
                  ([rowstr[iv]]<= jv < [rowstr[iv+1]]){
                    res2 = a[jv]*p[[colidx[jv]]];
                  }: res2;
                }: fold(+,0.0d);
	}:res;
      }: genarray(n,0.0d);
  return(q);
}

/*							
 * Conjugate gradient					
 *							
 * Compute approximation of x in Ax = z			
 *							
 * Input: A, x						
 * Output: z, ||r||
 *							
 */

#ifdef CLASS
double[.], double cg( double[NZ] a ,int[NPP] rowstr, int[NZ] colidx, double[N] x){
#else
double[.], double cg( double[.] a ,int[.] rowstr, int[.] colidx, double[.] x){
#endif

  sum = 0d;  
  z = genarray(shape(x), 0.0d);
  r = x;
  rho = sum(r*r);  
  p = r;
  inhibit_wlf = 0d;
 
  for( i=0; i<25; i++) {
    q = matvecmul(a,rowstr,colidx,p);
    inhibit_wlf *= q[0];
    alpha = rho / sum(p * q);
    z = z + (alpha * p);
    r = r - (alpha * q);
    rho0 = rho;
    rho = sum(r*r);
    beta = rho / rho0;
    p = r + (beta * p);
  }

  d = matvecmul(a,rowstr,colidx,z);
  r = d;
  d = x - r;
  s = sum(d*d)+inhibit_wlf;
  rnorm = sqrt(s);
  return(z,rnorm);
}



/*
 * Makea						
 *							
 * Genarates the Sparse Matrix A				
 *							
 * Input: n								
 * Output: a, colidx, rowstr				
 *
 *		Variables				
 *	N      : Number of rows and colomns				
 *	NONZER : Number of non zeros			
 *	A      : Array of NZ   				
 *	IA     : Array of NZ row indices		
 *	JA     :					
 *							
 */
double[.], int[.], int[.] makea(int n, int nonzer, double rcond, int lambda){

#ifdef CLASS
  int[N] arow;
  int[N,NONZERPP] acol;
  double[N,NONZERPP] aelt;
#endif

  arow = genarray([n],0);             // lenghs of individual sparse rows (NONZER or NONZER+1)
  acol = genarray([n,nonzer+1],-1);   // indices of non-zero elements within rows
  aelt = genarray([n,nonzer+1],0.0d); // values of non-zero elements within rows

      /* nn1 is the smallest power of 2 not less than n   */ 
  nn1 = 1;
  while (nn1<n) {
    nn1 = nn1 *2;    
  } 
      /*  Generate nonzero positions and save for the use in sparse  */
  tran = 314159265d; amult = 1220703125d;
      /* RandLC ( Linear Congruential Generator ) returns a uniform 
       * pseudorandom real*8 number in the range (0, 1) 
       * by using the linear congruential generator
       */ 
  rlc = create_randlc( tran, amult);
  zeta = randlc(rlc);
  
  for (i=0;i<n;i++){
    nzv = nonzer;
       /*
        * Generate a sparse vector of conceptual length n with nzv many non-zero elements.
        * Values and index positions are randomly chosen.
        * Store the generated vector in compressed form using 2 vectors of length nzv:
        * vc holds the non-zero values and ivc holds the corresponding indices.
        */
    vc,ivc = sprnvc(rlc,n,nzv,nn1);
       /* ... the ith element of vc is set to 0.5d to insure that A cannot be structurally singular 
          this potentially adds one more non-zero element! */
    nzv,vc,ivc = vecset (n,vc,ivc,nzv,i,0.5d);
    
    arow[i]= nzv; 
#ifdef HAVE_POLYHEDRAL_UIP
   acol[i] = ivc;
   aelt[i] = vc;
#else
    for( ivelt=0; ivelt<nzv; ivelt++) {
      acol[i,ivelt] = ivc[[ivelt]];
      aelt[i,ivelt] = vc[[ivelt]];
    }
#endif
  }
       /*  ... make the sparse matrix from the list of elements with duplicates  */
  a,colidx,rowstr = sparse(arow,acol,aelt, rcond, lambda);

  return (a,colidx,rowstr);
}



/*							
 * Sprnvc 						
 *							
 * Generate a sparse vector of conceptual length n having nz nonzeros	 				
 * (assuming nz << n). The sparse vector is represented by two vectors of
 * length nz+1: v - which holds all values and iv - which holds the index
 * positions of all non-zero values. The final element (v[nz]i, iv[nz])
 * is left 0 with index -1! This allows for a potential addition of one
 * element later!
 *
 * nn1 is supposed to be the smallest power of 2 >= n.
 * 
 * We successively generate 2 random numbers: one as non-zero value
 * the next as random index between 0 and (nn1-1).
 * Using this source of index value pairs, we fill the sparse vactors
 * ensuring that all indices are within bounds and without duplicates, i.e.,
 * no index is found twice in iv.
 * 							
 * Input: n, nz, nn1 					
 * Output: v, iv 				 
 */
double [.], int[.] sprnvc (RandLC &rlc, int n, int nz, int nn1){
 
  v = genarray([nz+1],0.0d);
  iv = genarray([nz+1],-1);
  nzv = 0;
  
  while(nzv<nz){
    vecelt = randlc(rlc);  // random element
    vecloc = randlc(rlc);  // random index

    i = toi(tod(nn1)*vecloc);  // index between 0 -> (nn1-1)
    if (i<n) {                 // otherwise: try again!
      found = false;
      for (ii=0;ii<nzv;ii++){   
	found = found | iv[[ii]] == i;
      }
      if (!found){            // otherwise: try again!
        v[[nzv]] = vecelt;
        iv[[nzv]] = i;
        nzv++;
      }
    }
  }
  return(v,iv);
}



/*							
 *  vecset
 * 						
 * the ith element of the vector is set to 1/2 to ensure that A cannot be structurally singular	
 * This potentially adds one more non-zero element to the vector!
 *
 *  Input: n, v, iv, nvz, i, val 								
 *  Output: nvz, v, iv						
 */
int, double [.], int[.] vecset (int n,double[.] v, int[.]iv, int nzv, int i,double val){
    
  set = false;
  for (k=0;k<nzv;k++){ 
 
    if (iv[[k]]==i){
      v = modarray(v,[k],val); 
      set = true;
    }
  }
  if (!set){
    v[[nzv]] = val;
    iv[[nzv]] = i;
    nzv = nzv+1;
  }
  return(nzv,v,iv);
}



/*							
 * Sparse 						
 *							
 * Assembles the matrix data structures			
 *  from the list of triples 				
 * 							
 * Input: arow(n), acol(n,nz+1), aelt(n,nz+1)
 * Output: a, rowstr, colidx				
 */
#ifdef CLASS
double [.], int[.], int[.] sparse(int[N] arow, int[N,NONZERPP] acol, double[N,NONZERPP] aelt,
                                  double rcond, int lambda) {

int[NPP] rowstr;
int[NZ] colidx;
double[NZ] a;
int[N] nzloc;

#else
double [.], int[.], int[.] sparse(int[.] arow, int[.,.] acol, double[.,.] aelt,
                                  double rcond, int lambda) {
#endif

  n = shape(arow)[0];
  nz_1 = shape(acol)[1];

  nz = n *(nz_1)*(nz_1);

  rowstr = genarray([n+1],0);
  colidx = genarray([nz],-1);
  a = genarray([nz],0.0d); 
  nzloc = genarray([n],0);

  for (i=0;i<n;i++){
    for (nza=0;nza<arow[[i]];nza++){
      j = acol[[i,nza]]+1;   
      rowstr[[j]] = rowstr[[j]] + arow[[i]];
    }
  }
  for (j=1;j<n+1;j++){
    rowstr[[j]] = rowstr[[j]]+rowstr[[j-1]];
  }
        /* ... rowstr[[j]] is now the location of the first nonzero of row j of a */
  nza = rowstr[[n]]-1;   
        /* ... generate actual values by summing duplicates */

  ratio = pow(rcond,1d/tod(n));
       /* The weights wi are a geometric sequence with a first value w=1d 
        * and the ratio chosen so that wN = 0.1d 
        */
  w = 1d; 
  for (i=0;i<n;i++){
    for (nza=0; nza<arow[[i]]; nza++){
      j = acol[[i,nza]];
      scale = w * aelt[[i,nza]];        
      for (nzrow=0; nzrow<arow[[i]]; nzrow++){
        jcol = acol[[i,nzrow]];
        va = aelt[[i,nzrow]] * scale;
              /* ...add the identity * rcond to the generated matrix 
               * to bound the smallest eigenvalue from below by rcond 
               */
        if ( (jcol==j) & (j==i) ){
          va = va + rcond - tod(lambda);
        }
               /* ...insertelts   */
	found = false;
        for (k = rowstr[[j]]; (!found) & (k<=(rowstr[[j+1]]-1)); k++){

          if (colidx[[k]] > jcol){
                 /* ... insert colidx here properly */
            for (kk = (rowstr[[j+1]]-2); kk>=k; kk--){
              if (colidx[[kk]] > -1) {                 
                a[[kk+1]] = a[[kk]];        
                colidx[[kk+1]] = colidx[[kk]];
              }
            }
            colidx[[k]] = jcol;
            a[[k]] = 0d;
            found = true;
          }
          else if (colidx[[k]] == -1){     
          
             colidx[[k]] = jcol;
             found = true;
          }
          else if (colidx[[k]] == jcol){
                 /* ... mark the duplicated entry */
            nzloc[[j]] = nzloc[[j]]+1;
            found = true;
          } 
        }
       a[[k-1]]= a[[k-1]] + va;
      }
    }
    w = w * ratio;
  }
       /* compress:  ...remove empty entries and generate final results   */
  for (j=1; j<n; j++){
    nzloc[[j]] = nzloc[[j]] + nzloc[[j-1]];
  }
  for (j=0;j<n;j++){
    if(j>0){  j1 = rowstr[[j]] - nzloc[[j-1]];   } 
    else   { j1 = 0;  }
    j2 = rowstr[[j+1]] - nzloc[[j]] - 1;
    nza = rowstr[[j]];
    for (k=j1; k<=j2; k++){
      a[[k]] = a[[nza]];
      colidx[[k]] = colidx[[nza]];
      nza = nza+1; 
    }
  }
  for (j=1; j<n+1; j++){                             
    rowstr[[j]] = rowstr[[j]] - nzloc[[j-1]];
  }   
  nza = rowstr[[n+1]]-1;
       /* ... end of compress */ 
  return(a,colidx,rowstr);
} 

#if 0
/*
 * getStartTime, getEndtTime
 *
 * ... get the starting and the ending time for measuring the process of 
 * the conjugate gradient Method CG
 */
ptime, int getStartTime( int n) {
  return( getptime(), n);
}

ptime, double getEndTime( double d) {
  return( getptime(), d);
}


/*
 * getinitStarta, getinitStopa
 *
 * ... get the starting and the ending time for measuring the process of initialisation 
 * and the process of generating a matrix A formed by a triple (a, colidx, rowstr) 
 */

ptime, double[.] getinitStarta( double[.] a) {
  return( getptime(), a);
}

ptime, double[.] getinitStopa( double[.] a) {
  return( getptime(), a);
}

#endif


/** <!--********************************************************************-->
 *
 *                      M A I N    P R O G R A M
 *                Conjugate Gradient Benchmark - SAC Version
 *
 ******************************************************************************/
int main() {

/* N                 : Number of rows & columns
 * NITER             : Number of iterations
 * LAMBDA            : Shift of the main diagonal of a sparse Matrix A
 * NONZER            : Number of non zeros
 * ZETA_VERIFY_VALUE : The correct Zeta
 */

#ifdef CLASS
  n = N;
  niter = NITER;
  lambda = LAMBDA;
  nonzer = NONZER;
  zeta_verify_value = ZETA_VERIFY_VALUE;
  rcond = RCOND;
#else
  n = (int)FibreScanIntArray();
  niter = (int) FibreScanIntArray();
  lambda = (int) FibreScanIntArray();
  nonzer = (int) FibreScanIntArray();
  zeta_verify_value = (double) FibreScanDoubleArray();
  rcond = (double) FibreScanDoubleArray();
#endif

  printf("\n\n SAC Parallel Benchmarks (NPB3.2-SAC)"
              " - CG Benchmark\n");

  rtimer = createRTimer( );

       /* ... Measure Initialisation Time  */
  startRTimer( rtimer);
       /* ... generate the input sparse Matrix A which is formed by a triple (a, colidx, rowstr) */
  a,colidx,rowstr = makea(n, nonzer, rcond, lambda);
  x = genarray([n],1d);
  zeta = 0d;
  stopRTimer( rtimer);
  
       /* ... End Measure Initialisation Time  */
  init_time = getRTimerDbl( rtimer);

  printf("\n Size       : %d\n"
        " Iterations : %d\n"
        "\n Initialisation time = %f seconds",n,niter,init_time);

  printf("\n\n   iteration          ||r||                 zeta\n");

  resetRTimer( rtimer);
  
  /* ... Start Timimg Here  */
  startRTimer( rtimer);
  
  for (it=1;it<=niter;it++){ 
    z,rnorm = cg(a,rowstr,colidx, x);
    zeta = tod(lambda) + (1d/(sum(x*z)));
    printf("\n       %2d       %.14E    %.13f",it,rnorm,zeta);
    x = z*(1d/sqrt(sum(z*z)));    
  }
  stopRTimer( rtimer);
  /* ... End Timing Here  */

  elapsed = getRTimerDbl( rtimer);
  printf("\n Benchmark Completed\n");
  epsilon = pow(1d,-10d); 
  err = fabs(zeta - zeta_verify_value)/ zeta_verify_value;

  if (err <= epsilon){
    verified = true;
    verif = "SUCCESSFUL";
    printf(" VERIFICATION SUCCESSFUL\n Zeta is\t %.14E\n"
        " Error is\t %.14E\n",zeta,err);
  }
  else {
    verified = false;
    verif = "UNSUCCESSFUL";
    printf(" VERIFICATION FAILED\n Zeta is\t\t %f\n"
        " The correct zeta is\t %f\n",zeta,zeta_verify_value);
  }

  if( elapsed != 0d ) { 
    gflops = tod( 2*niter*n ) * ( 3d+tod( nonzer*(nonzer+1) )+ 25d *(5d +tod( tod(nonzer)*(tod(nonzer)+1d) ))+ 3d ) / elapsed / 1000000000.0d;
  }
  else gflops = 0d;
  printf("\n\n CG Benchmark Completed.\n");

#ifdef CLASS
  printf(" Class\t\t =\t%s\n", CLASS_STR );
#else
  printf(" Class\t\t =\tfrom stdin\n");
#endif
  printf(" Size\t\t =\t%d\n"			/*	Problem size	*/
         " Iterations\t =\t%d\n"
         " Time in seconds =\t%f\n"
         " Gop/s total     =\t%f\n"		/*        RATE	       */
         " Operation type  =\tfloating point\n"
         " Verification    =\t%s\n"
         " Version\t =\t3.2.1\n"
         " Compile date\t =\t"__DATE__"  \n\n\n",
         (int)n,(int)niter,(double)elapsed,(double)gflops,(String::string)verif);

  return(0);
}
